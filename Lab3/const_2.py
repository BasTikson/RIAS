data_variant = {
    'A': [0.11, 0.22, 0.32, 0.45, 0.49, 0.62, 0.71, 0.81, 0.84, 0.92, 1.00, 0.80, 0.60, 0.46, 0.23, 0.05],
    'B': [0.14, 0.21, 0.32, 0.39, 0.47, 0.59, 0.64, 0.80, 0.82, 0.92, 1.00, 0.82, 0.62, 0.50, 0.20, 0.10],
}

data_const = {
    'дополнения': 2,
    'пересечения': 3,
    'объединения': 3,
    'кардинальные числа': 3,
    'отображение': 2,
    'мера энтропии': 4,
    'функция доверия': 4
}


def f(x):
    return 3 * x - 3
def map_fuzzy_set(X, Y, A):
    """
    Отображает нечеткое множество A в нечеткое множество B согласно функции f.

    :param f: Функция отображения f: X -> Y
    :param X: Множество аргументов x
    :param Y: Универсальное множество y
    :param A: Нечеткое множество A с функциями принадлежности для каждого x в X
    :return: Список значений функции принадлежности для каждого y в Y
    """
    B = [0] * len(Y)  # Инициализируем список нулями

    for x in X:
        y = f(x)
        if y in Y:
            index = Y.index(y)
            B[index] = max(B[index], A[x])
    return B







X = list(range(1, 17))
Y = list(range(2, 18))
A = data_variant["A"]

B = map_fuzzy_set(X, Y, A)
